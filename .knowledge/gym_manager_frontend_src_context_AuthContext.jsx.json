{"is_source_file": true, "format": "JavaScript/JSX", "description": "This file defines the React context and hooks for handling authentication within a front-end application. It manages user session state via Supabase, exposes authentication actions (sign-up, sign-in, sign-out, password reset/update), and provides a React context for sharing auth state across components.", "external_files": ["../lib/supabaseClient"], "external_methods": ["supabase.auth.getSession", "supabase.auth.onAuthStateChange", "supabase.auth.signUp", "supabase.auth.signInWithPassword", "supabase.auth.signOut", "supabase.auth.resetPasswordForEmail", "supabase.auth.updateUser"], "published": ["useAuth", "AuthProvider"], "classes": [], "methods": [{"name": "useAuth()", "description": "React hook to access the AuthContext value, throwing an error if used outside an AuthProvider.", "scope": "", "scopeKind": ""}, {"name": "AuthProvider({ children })", "description": "React component that wraps the application, manages authentication state, and provides authentication actions via context.", "scope": "", "scopeKind": ""}, {"name": "signUp", "description": "Function to sign up a new user with email and password, with optional redirect URL."}, {"name": "signIn", "description": "Function to authenticate an existing user with email and password."}, {"name": "signOut", "description": "Function to sign out the current user."}, {"name": "resetPassword", "description": "Function to initiate a password reset process via email."}, {"name": "updatePassword", "description": "Function to update the current user's password."}, {"name": "init()", "scope": "AuthProvider", "scopeKind": "function", "description": "unavailable"}], "calls": ["supabase.auth.getSession", "supabase.auth.onAuthStateChange", "supabase.auth.signUp", "supabase.auth.signInWithPassword", "supabase.auth.signOut", "supabase.auth.resetPasswordForEmail", "supabase.auth.updateUser"], "search-terms": ["AuthContext", "supabase.auth", "useAuth hook", "AuthProvider component", "authentication session", "signIn", "signUp", "signOut", "resetPassword", "updatePassword"], "state": 2, "file_id": 93, "knowledge_revision": 387, "git_revision": "5125a194823b1eb49309fe9974c4075918935ace", "revision_history": [{"307": ""}, {"387": "5125a194823b1eb49309fe9974c4075918935ace"}], "ctags": [{"_type": "tag", "name": "AuthContext", "path": "/home/kavia/workspace/code-generation/gym-management-system-21100-21109/gym_manager_frontend/src/context/AuthContext.jsx", "pattern": "/^const AuthContext = createContext(undefined);$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "AuthProvider", "path": "/home/kavia/workspace/code-generation/gym-management-system-21100-21109/gym_manager_frontend/src/context/AuthContext.jsx", "pattern": "/^export function AuthProvider({ children }) {$/", "language": "JavaScript", "kind": "function", "signature": "({ children })"}, {"_type": "tag", "name": "init", "path": "/home/kavia/workspace/code-generation/gym-management-system-21100-21109/gym_manager_frontend/src/context/AuthContext.jsx", "pattern": "/^    async function init() {$/", "language": "JavaScript", "kind": "function", "signature": "()", "scope": "AuthProvider", "scopeKind": "function"}, {"_type": "tag", "name": "useAuth", "path": "/home/kavia/workspace/code-generation/gym-management-system-21100-21109/gym_manager_frontend/src/context/AuthContext.jsx", "pattern": "/^export function useAuth() {$/", "language": "JavaScript", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "value", "path": "/home/kavia/workspace/code-generation/gym-management-system-21100-21109/gym_manager_frontend/src/context/AuthContext.jsx", "pattern": "/^  return <AuthContext.Provider value={value}>{children}<\\/AuthContext.Provider>;$/", "language": "JavaScript", "kind": "field", "scope": "Provider", "scopeKind": "class"}], "hash": "c73e3ec4aeb06188d9ae2a3d55d3730f", "format-version": 4, "code-base-name": "gym_manager_frontend", "filename": "gym_manager_frontend/src/context/AuthContext.jsx", "fields": [{"name": "return <AuthContext.Provider value={value}>{children}<\\/AuthContext.Provider>;", "scope": "Provider", "scopeKind": "class", "description": "unavailable"}]}